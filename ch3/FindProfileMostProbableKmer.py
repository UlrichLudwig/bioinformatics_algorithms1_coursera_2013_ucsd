'''
Given a profile matrix Profile, we can evaluate the probability of every
k-mer in a string Text and find a Profile-most probable k-mer in Text,
i.e., a k-mer that was most likely to have been generated by Profile.
For example, ACGGGGATTACC is the Profile-most probable 12-mer in
GGTACGGGGATTACCT. Indeed, every other 12-mer in this string has
probability 0.  
'''
def calProbKmer(kmer,profile_dic):
    '''Give a kmer and profile dic, calculate the probability of that kmer'''
    
    if len(kmer)==0:
        prob = 0
    else:
        prob = 1
        for i,letter in enumerate(kmer):
            prob *= profile_dic[letter][i]
    return prob
    
def findProfileMostProbableKmer(text,k,profile):
    '''
    Profile-most Probable k-mer Problem: Find a Profile-most probable
    k-mer in a string. 
    
    Input: A string Text, an integer k, and a k * 4 matrix Profile.
    Output: A Profile-most probable k-mer in Text.
    
    CODE CHALLENGE: Solve the Profile-most Probable k-mer Problem.
    
    Sample Input:
    ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT
    5
    A C G T
    0.2 0.4 0.3 0.1
    0.2 0.3 0.3 0.2
    0.3 0.1 0.5 0.1
    0.2 0.5 0.2 0.1
    0.3 0.1 0.4 0.2

    Sample Output:
    CCGAG
    '''    
    all_kmers =  [text[i:i+k] for i in range(len(text)-k+1)]
    best_kmer = all_kmers[0]
    best_prob = calProbKmer(best_kmer,profile)

    for kmer in all_kmers[1:]:
        current_prob = calProbKmer(kmer,profile)
        if  current_prob > best_prob:
            best_kmer = kmer
            best_prob = current_prob
    return best_kmer
            
if __name__ == "__main__":
    # read file and get parameters
    fin = open('fpmpk_input.txt','r')
    tmp = fin.readlines()
    text = tmp[0].rstrip('\n')
    k = int(tmp[1].rstrip('\n'))

    atcg = tmp[2].split()
    profile_dic ={}
    for i in atcg:
        profile_dic[i] = []

    for line in tmp[3:]:
        for j,num in enumerate(line.split()):
            profile_dic[atcg[j]].append(float(num))
            
    fin.close()

    # run the function 
    motif = findProfileMostProbableKmer(text,k,profile_dic)
    
    # output the results
    with  open('output.txt','w') as fout:
        fout.write ("%s" % motif )

    from subprocess import call
    call(["open","output.txt"])        
        
